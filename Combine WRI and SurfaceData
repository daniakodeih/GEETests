//////////////////////////////////////////////////////////////
// Asset List
//////////////////////////////////////////////////////////////

var gsw = ee.Image('JRC/GSW1_0/GlobalSurfaceWater');
var occurrence = gsw.select('occurrence');

//////////////////////////////////////////////////////////////
// Constants
//////////////////////////////////////////////////////////////

var VIS_OCCURRENCE = {
  min: 0,
  max: 100,
  palette: ['red', 'blue']
};
var VIS_WATER_MASK = {
  palette: ['white', 'black']
};

//////////////////////////////////////////////////////////////
// Calculations
//////////////////////////////////////////////////////////////

// Create a water mask layer, and set the image mask so that non-water areas
// are opaque.
var water_mask = occurrence.gt(90).unmask(0);

//////////////////////////////////////////////////////////////
// Initialize Map Location
//////////////////////////////////////////////////////////////

// Uncomment one of the following statements to center the map.
 //Map.setCenter(-90.162, 29.8597, 10);   // New Orleans, USA
 Map.setCenter(-95.329268, 29.775947, 10);    // Houston, USA
// Map.setCenter(-114.9774, 31.9254, 10); // Mouth of the Colorado River, Mexico
// Map.setCenter(-111.1871, 37.0963, 11); // Lake Powell, USA
// Map.setCenter(149.412, -35.0789, 11);  // Lake George, Australia
// Map.setCenter(105.26, 11.2134, 9);     // Mekong River Basin, SouthEast Asia
// Map.setCenter(90.6743, 22.7382, 10);   // Meghna River, Bangladesh
// Map.setCenter(81.2714, 16.5079, 11);   // Godavari River Basin Irrigation Project, India
// Map.setCenter(14.7035, 52.0985, 12);   // River Oder, Germany & Poland
// Map.setCenter(-59.1696, -33.8111, 9);  // Buenos Aires, Argentina
//Map.setCenter(-74.4557, -8.4289, 11);  // Ucayali River, Peru

//////////////////////////////////////////////////////////////
// Map Layers
//////////////////////////////////////////////////////////////

Map.addLayer({
  eeObject: water_mask,
  visParams: VIS_WATER_MASK,
  name: '90% occurrence water mask',
  shown: false
});
Map.addLayer({
  eeObject: occurrence.updateMask(occurrence.divide(100)),
  name: 'Water Occurrence (1984-2015)',
  visParams: VIS_OCCURRENCE
});


// Add WRI Power Plants

var fvLayer = ui.Map.FeatureViewLayer('WRI/GPPD/power_plants_FeatureView');


// select different types of plants and assign colors 
var visParams = {
  opacity: 1,
  color: {
    property: 'fuel1',
    categories: [
      ['Coal', '000000'],
      ['Oil', '593704'],
      ['Gas', '00FF00'],
      ['Hydro', '0565A6'],
      ['Nuclear', 'E31A1C'],
      ['Solar', 'FF7F00'],
      ['Waste', '6A3D9A'],
      ['Wind', '5CA2D1'],
      ['Geothermal', 'FDBF6F'],
      ['Biomass', '229A00']
    ],
    defaultValue: 'FFFFFF'
  },
  
  // make the dot size aligned with mw capacity
  rules: [
    {
      filter: ee.Filter.expression('capacitymw < 500'),
      pointSize: 5,
    },
    {
      filter: ee.Filter.expression('capacitymw >= 500 AND capacitymw < 1000'),
      pointSize: 10,
    },
    {
      filter: ee.Filter.expression('capacitymw >= 1000'),
      pointSize: 15,
    }
  ]
  
};

fvLayer.setVisParams(visParams);
fvLayer.setName('Power plant (fuel type and capacity)');

Map.add(fvLayer);


// Output

// Visualization for WRI/GPPD/power_plants
// https://code.earthengine.google.com/9efbd726e4a8ba9b8b56ba94f1267678

var table = ee.FeatureCollection("WRI/GPPD/power_plants");

// Pink  'Gas': 'BC80BD',
// Get a color from a fuel
var fuelColor = ee.Dictionary({
  'Coal': '000000',
  'Oil': '593704',
  'Gas': '00FF00',
  'Hydro': '0565A6',
  'Nuclear': 'E31A1C',
  'Solar': 'FF7F00',
  'Waste': '6A3D9A',
  'Wind': '5CA2D1',
  'Geothermal': 'FDBF6F',
  'Biomass': '229A00'
});

// List of fuels to add to the map
var fuels = ['Coal', 'Oil', 'Gas', 'Hydro', 'Nuclear', 'Solar', 'Waste',
    'Wind', 'Geothermal', 'Biomass'];

/**
 * Computes size from capacity and color from fuel type.
 *
 * @param {!ee.Geometry.Point} pt A point
 * @return {!ee.Geometry.Point} Input point with added style dictionary.
 */
function addStyle(pt) {
  var size = ee.Number(pt.get('capacitymw')).sqrt().divide(10).add(2);
  var color = fuelColor.get(pt.get('fuel1'));
  return pt.set('styleProperty', ee.Dictionary({'pointSize': size, 'color': color}));
}

// Make a FeatureCollection out of the power plant data table
var pp = ee.FeatureCollection(table).map(addStyle);
print(pp.first());

/**
 * Adds power plants of a certain fuel type to the map.
 * This adds single fuel layers to the map, turning off for now
 * @param {string} fuel A fuel type
 */
/*function addLayer(fuel) {
  print(fuel);
  Map.addLayer(pp.filter(ee.Filter.eq('fuel1', fuel)).style({styleProperty: 'styleProperty', neighborhood: 50}), {}, fuel, true, 0.65);
}

// Apply `addLayer` to each record in `fuels`
fuelColor.keys().evaluate(function(fuelsList) {
  fuelsList.map(addLayer);
});
*/


// Add Floods 

var gfd = ee.ImageCollection("GLOBAL_FLOOD_DB/MODIS_EVENTS/V1")

print(gfd)

// An individual flood event - flooding due to Hurricane Isaac in the USA.
var hurricaneIsaacDartmouthId = 3977;
var hurricaneIsaacUsa = ee.Image(
    gfd.filterMetadata('id', 'equals', hurricaneIsaacDartmouthId).first());

print(hurricaneIsaacUsa)

// This function adds a band representing the image timestamp.
var addTime = function(image) {
  return image.addBands(image.metadata('system:time_start')
    // Convert milliseconds from epoch to years to aid in
    // interpretation of the following trend calculation.
    .divide(1000 * 60 * 60 * 24 * 365));
};

// Define reference conditions from the first 10 years of data.
var reference = gfd.filterDate('2000-01-01', '2010-12-31').map(addTime);


print(reference)

// Compute the mean of the full data set
var mean = gfd.mean();
print(mean);

Map.addLayer(mean.select('flooded').selfMask(),  {min: 0, max: 1}, 'Mean');
  
// This is a function to pass to Iterate().
// As anomaly images are computed, add them to the list.
var accumulate = function(image, list) {

  var previous = ee.Image(ee.List(list).get(-1));
  var added = image.add(previous)
    // Propagate metadata to the new image.
    .set('system:time_start', image.get('system:time_start'));
  // Return the list with the cumulative anomaly inserted.
  return ee.List(list).add(added);
};

var series = gfd.filterDate('2017-01-01', '2018-12-31').map(function(image) {
    return image.select('flooded');
});


print(series);



Map.addLayer(
  hurricaneIsaacUsa.select('flooded').selfMask(),
  {min: 0, max: 1, palette: '001133'},
  'Hurricane Isaac - Inundation Extent');
  
// The duration (number of days a flood event lasted).
var durationPalette = ['C3EFFE', '1341E8', '051CB0', '001133'];
Map.addLayer(
  hurricaneIsaacUsa.select('duration').selfMask(),
  {min: 0, max: 4, palette: durationPalette},
  'Hurricane Isaac - Duration');
  


// Map all floods to generate the satellite-observed historical flood plain.
var gfdFloodedSum = gfd.select('flooded').sum();
Map.addLayer(
  gfdFloodedSum.selfMask(),
  {min: 0, max: 10, palette: durationPalette},
  'GFD Satellite Observed Flood Plain');

// Overlay permanent water to distinguish flood water.
var jrc = gfd.select('jrc_perm_water').sum().gte(1);
Map.addLayer(
  jrc.selfMask(),
  {min: 0, max: 1, palette: 'C3EFFE'},
  'JRC Permanent Water');